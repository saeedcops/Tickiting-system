FROM python:3
# it will enable python to do stdout logs instead of being buffered
ENV PYTHONUNBUFFERED 1
ENV LANG en_US.utf8


RUN apt-get update
RUN apt-get install -y --reinstall ca-certificates
# RUN apt-get install -y apache2 apache2-dev
# RUN DEBIAN_FRONTEND=noninteractive apt-get install -y  libldap2-dev libsasl2-dev slapd ldap-utils
# creating 
RUN mkdir /app

# copy all file in app folder
COPY . /app
# copy requriements.txt in app folder
COPY requirements.txt /requirements.txt
# copy db connectivity test script, because we have made /app as current working directory so script can be executed.
COPY docker/django/scripts/db_connectivity.sh /db_connectivity.sh
COPY docker/django/adfs.cer /adfs-pub.pem
COPY docker/django/adfs.cer /usr/local/share/ca-certificates/adfs-pub.crt
COPY docker/django/4536904705.crt /usr/local/share/ca-certificates/4536904705.crt
RUN chmod 644 /adfs-pub.pem
RUN chmod 644 /usr/local/share/ca-certificates/adfs-pub.crt
RUN chmod 644 /usr/local/share/ca-certificates/4536904705.crt
# copy start gunicorn server script, because we have made /app as current working directory so script can be executed.
COPY docker/django/scripts/gunicorn.sh /gunicorn.sh
# running pip command to install all dependencies
ENV TZ=Africa/Cairo
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN echo "192.168.10.200  adfs.cops.com" >> /etc/hosts
RUN export SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
RUN update-ca-certificates
RUN pip install --upgrade certifi
#--mount=type=cache,mode=0755,target=/root/.cache/pip

RUN pip install -r requirements.txt

# RUN python setup.py install

RUN chmod +x /db_connectivity.sh
RUN chmod +x /gunicorn.sh

# making /app as a current working dir
WORKDIR /app

#It will check whether we are able to connect to postgres service or not.
ENTRYPOINT ["/gunicorn.sh"]