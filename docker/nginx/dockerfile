ARG VERSION=alpine
FROM nginx:${VERSION} as builder

# ENV MORE_HEADERS_VERSION=0.33
# ENV MORE_HEADERS_GITREPO=openresty/headers-more-nginx-module

# openldap-back-mdb openldap-overlay-all
RUN apk update && apk add unzip openldap openldap-dev

# Download sources https://github.com/kvspb/nginx-auth-ldap/archive/v
RUN wget "http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz" -O nginx.tar.gz && \
    wget https://github.com/kvspb/nginx-auth-ldap/archive/master.zip 
    # wget "https://github.com/${MORE_HEADERS_GITREPO}/archive/v${MORE_HEADERS_VERSION}.tar.gz" -O extra_module.tar.gz

# For latest build deps, see https://github.com/nginxinc/docker-nginx/blob/master/mainline/alpine/Dockerfile
RUN  apk add --no-cache --virtual .build-deps \
    gcc \
    libc-dev \
    make \
    openssl-dev \
    pcre-dev \
    zlib-dev \
    linux-headers \
    libxslt-dev \
    gd-dev \
    geoip-dev \
    perl-dev \
    libedit-dev \
    mercurial \
    bash \
    alpine-sdk \
    findutils 

    # libldap2-dev \
    # openldap

SHELL ["/bin/ash", "-eo", "pipefail", "-c"]

RUN rm -rf /usr/src/nginx /usr/src/extra_module && mkdir -p /usr/src/nginx /usr/src/nginx/nginx-${NGINX_VERSION} && \
    tar -zxC /usr/src/nginx -f nginx.tar.gz && \
    unzip  master.zip &&\
    mv  nginx-auth-ldap-master/* -f /usr/src/nginx/nginx-${NGINX_VERSION}

WORKDIR /usr/src/nginx/nginx-${NGINX_VERSION}

# Reuse same cli arguments as the nginx:alpine image used to build
RUN CONFARGS=$(nginx -V 2>&1 | sed -n -e 's/^.*arguments: //p') && \
    sh -c "./configure --with-compat $CONFARGS --add-dynamic-module=/usr/src/nginx/nginx-${NGINX_VERSION}" && make modules


# Production container starts here
FROM nginx:${VERSION}

RUN apk update && apk add openldap openldap-dev

COPY --from=builder /usr/src/nginx/nginx-${NGINX_VERSION}/objs/*_module.so /etc/nginx/modules/

# .... skipped inserting config files and stuff ...

# Validate the config

# copying our custom configuration to our nginx service 
COPY ./docker/nginx/nginx.conf /etc/nginx/nginx.conf
# COPY ./docker/nginx/certificate.crt /etc/nginx/ssl/certificate.crt
# COPY ./docker/nginx/private.key /etc/nginx/ssl/private.key
# COPY ./docker/nginx/ssl_passwords /etc/nginx/ssl/ssl_passwords
# COPY ./docker/nginx/site.conf /etc/nginx/sites-available/site.conf


RUN nginx -t

# CMD ["nginx", "-g", "daemon off;"]